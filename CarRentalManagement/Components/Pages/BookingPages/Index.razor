@page "/bookings"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CarRentalManagement.Domain
@using CarRentalManagement.Data
@implements IAsyncDisposable
@inject IDbContextFactory<CarRentalManagement.Data.CarRentalManagementContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="bookings/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredBookings">
    <PropertyColumn Property="booking => booking.DateOut" Sortable="true" />
    <PropertyColumn Property="booking => booking.DateIn" />
    <PropertyColumn Property="booking => booking.VehicleId" />
    <PropertyColumn Property="booking => booking.CustomerId" />
    <PropertyColumn Property="booking => booking.DateCreated" />
    <PropertyColumn Property="booking => booking.DateUpdated" />
    <PropertyColumn Property="booking => booking.CreatedBy" />
    <PropertyColumn Property="booking => booking.UpdatedBy" />

    <TemplateColumn Context="booking">
        <a href="@($"bookings/edit?id={booking.Id}")">Edit</a> |
        <a href="@($"bookings/details?id={booking.Id}")">Details</a>    
        <AuthorizeView Roles="Administrator">
            | <a href="@($"bookings/delete?id={booking.Id}")">Delete</a>
        </AuthorizeView>
    </TemplateColumn>
</QuickGrid>

@code {
    private CarRentalManagementContext context = default!;
    private string userId = string.Empty;
    private bool isAdmin = false;
    @inject AuthenticationStateProvider authenticationStateProvider
    // Filter bookings by userId
    private IQueryable<Booking> FilteredBookings => isAdmin
    ? context.Booking // Admins can see all bookings
    : context.Booking.Where(e => e.CreatedBy == userId); // Regular users see only their own bookings

    protected override async void OnInitialized()
    {
        // Fetch the authentication state
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // Extract user information
        userId = user.FindFirst("userId")?.Value ?? string.Empty;
        isAdmin = user.IsInRole("Administrator");
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
